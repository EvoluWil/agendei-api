generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String        @id @default(uuid())
  email     String        @unique
  name      String
  password  String
  picture   String?
  role      enumUserRoles @default(COMMON)
  createdAt DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt DateTime?     @updatedAt @db.Timestamptz(3)

  ownerEvents  Event[]       @relation(name: "ownerEvents")
  reservations Reservation[]

  @@map("users")
}

model Event {
  id          String   @id @default(uuid())
  slug        String   @unique
  name        String   @unique
  startDate   DateTime @db.Timestamptz(3)
  endDate     DateTime @db.Timestamptz(3)
  active      Boolean  @default(true)
  description String
  address     String
  state       String?
  district    String?
  city        String?
  value       Int?
  limit       Int?
  picture     String?

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)

  owner User @relation(fields: [ownerId], references: [id], name: "ownerEvents", onDelete: Cascade)

  reservations Reservation[]

  ownerId String

  @@map("events")
}

model Reservation {
  id     String                @id @default(uuid())
  status enumReservationStatus @default(PENDING)

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id])

  userId  String
  eventId String

  @@map("reservations")
}

enum enumReservationStatus {
  APPROVED
  REJECTED
  PENDING
  CANCELED
}

enum enumUserRoles {
  COMMON
  ADMIN
}
